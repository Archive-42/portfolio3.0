import copy from 'fast-copy';
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
import { wrapCollection } from '../common-utils';
import * as endpoints from '../plain/endpoints';
import * as checks from '../plain/checks';

function createAssetApi(http) {
  var getParams = function getParams(raw) {
    return {
      spaceId: raw.sys.space.sys.id,
      environmentId: raw.sys.environment.sys.id,
      assetId: raw.sys.id
    };
  };

  return {
    processForLocale: function processForLocale(locale, options) {
      var raw = this.toPlainObject();
      return endpoints.asset.processForLocale(http, getParams(raw), raw, locale, options).then(function (data) {
        return wrapAsset(http, data);
      });
    },
    processForAllLocales: function processForAllLocales(options) {
      var raw = this.toPlainObject();
      return endpoints.asset.processForAllLocales(http, getParams(raw), raw, options).then(function (data) {
        return wrapAsset(http, data);
      });
    },
    update: function update() {
      var raw = this.toPlainObject();
      return endpoints.asset.update(http, getParams(raw), raw).then(function (data) {
        return wrapAsset(http, data);
      });
    },
    "delete": function del() {
      var raw = this.toPlainObject();
      return endpoints.asset.del(http, getParams(raw));
    },
    publish: function publish() {
      var raw = this.toPlainObject();
      return endpoints.asset.publish(http, getParams(raw), raw).then(function (data) {
        return wrapAsset(http, data);
      });
    },
    unpublish: function unpublish() {
      var raw = this.toPlainObject();
      return endpoints.asset.unpublish(http, getParams(raw)).then(function (data) {
        return wrapAsset(http, data);
      });
    },
    archive: function archive() {
      var raw = this.toPlainObject();
      return endpoints.asset.archive(http, getParams(raw)).then(function (data) {
        return wrapAsset(http, data);
      });
    },
    unarchive: function unarchive() {
      var raw = this.toPlainObject();
      return endpoints.asset.unarchive(http, getParams(raw)).then(function (data) {
        return wrapAsset(http, data);
      });
    },
    isPublished: function isPublished() {
      var raw = this.toPlainObject();
      return checks.isPublished(raw);
    },
    isUpdated: function isUpdated() {
      var raw = this.toPlainObject();
      return checks.isUpdated(raw);
    },
    isDraft: function isDraft() {
      var raw = this.toPlainObject();
      return checks.isDraft(raw);
    },
    isArchived: function isArchived() {
      var raw = this.toPlainObject();
      return checks.isArchived(raw);
    }
  };
}
/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw asset data
 * @return Wrapped asset data
 */


export function wrapAsset(http, data) {
  var asset = toPlainObject(copy(data));
  var assetWithMethods = enhanceWithMethods(asset, createAssetApi(http));
  return freezeSys(assetWithMethods);
}
/**
 * @private
 */

export var wrapAssetCollection = wrapCollection(wrapAsset);