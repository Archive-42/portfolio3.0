function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @packageDocumentation
 * @hidden
 */
import axios from 'axios';
import { createHttpClient, getUserAgentHeader } from 'contentful-sdk-core';
import copy from 'fast-copy';
export var defaultHostParameters = {
  defaultHostname: 'api.contentful.com',
  defaultHostnameUpload: 'upload.contentful.com'
};
/**
 * @private
 */

export function createCMAHttpClient(params) {
  var plainClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var sdkMain = plainClient ? 'contentful-management-plain.js' : 'contentful-management.js';
  var userAgentHeader = getUserAgentHeader( // @ts-expect-error
  "".concat(sdkMain, "/").concat("7.8.0"), params.application, params.integration, params.feature);
  var requiredHeaders = {
    'Content-Type': 'application/vnd.contentful.management.v1+json',
    'X-Contentful-User-Agent': userAgentHeader
  };
  params = _objectSpread(_objectSpread({}, defaultHostParameters), copy(params));

  if (!params.accessToken) {
    throw new TypeError('Expected parameter accessToken');
  }

  params.headers = _objectSpread(_objectSpread({}, requiredHeaders), params.headers);
  return createHttpClient(axios, params);
}