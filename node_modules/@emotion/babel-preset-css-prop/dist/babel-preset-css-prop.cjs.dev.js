'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _objectWithoutPropertiesLoose = require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
var jsx = require('@babel/plugin-transform-react-jsx');
var jsxDev = require('@babel/plugin-transform-react-jsx-development');
var pragmatic = require('@emotion/babel-plugin-jsx-pragmatic');
var emotion = require('babel-plugin-emotion');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);
var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefault(_objectWithoutPropertiesLoose);
var jsx__default = /*#__PURE__*/_interopDefault(jsx);
var jsxDev__default = /*#__PURE__*/_interopDefault(jsxDev);
var pragmatic__default = /*#__PURE__*/_interopDefault(pragmatic);
var emotion__default = /*#__PURE__*/_interopDefault(emotion);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var pragmaName = '___EmotionJSX'; // pull out the emotion options and pass everything else to the jsx transformer
// this means if @babel/plugin-transform-react-jsx adds more options, it'll just work
// and if babel-plugin-emotion adds more options we can add them since this lives in
// the same repo as babel-plugin-emotion

var index = (function (api, _ref) {
  if (_ref === void 0) {
    _ref = {};
  }

  var _ref2 = _ref,
      pragma = _ref2.pragma,
      sourceMap = _ref2.sourceMap,
      autoLabel = _ref2.autoLabel,
      labelFormat = _ref2.labelFormat,
      instances = _ref2.instances,
      _ref2$development = _ref2.development,
      development = _ref2$development === void 0 ? false : _ref2$development,
      options = _objectWithoutPropertiesLoose__default['default'](_ref2, ["pragma", "sourceMap", "autoLabel", "labelFormat", "instances", "development"]);

  if (options.runtime) {
    console.warn('`runtime` option has been deprecated. It still works and will continue to work in Emotion 10 but we have found out that including JSX plugin twice in the Babel configuration leads to hard to debug problems and it\'s not always obvious that some presets include it. If you want to configure `runtime: "automatic"` just replace `@emotion/babel-preset-css-prop` with `@babel/preset-react` and `babel-plugin-emotion`. You can find out how to configure things properly here: https://emotion.sh/docs/css-prop#babel-preset');
  }

  return {
    plugins: [options.runtime !== 'automatic' && [pragmatic__default['default'], {
      "export": 'jsx',
      module: '@emotion/core',
      "import": pragmaName
    }], options.runtime === 'automatic' ? [development ? jsxDev__default['default'] : jsx__default['default'], _objectSpread({
      importSource: '@emotion/core'
    }, options)] : [jsx__default['default'], _objectSpread({
      pragma: pragmaName,
      pragmaFrag: 'React.Fragment'
    }, options)], [emotion__default['default'], {
      sourceMap: sourceMap,
      autoLabel: autoLabel,
      labelFormat: labelFormat,
      instances: instances,
      cssPropOptimization: true
    }]].filter(Boolean)
  };
});

exports.default = index;
