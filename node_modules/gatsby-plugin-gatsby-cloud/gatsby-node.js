"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _webpackAssetsManifest = _interopRequireDefault(require("webpack-assets-manifest"));

var _pluginData = _interopRequireDefault(require("./plugin-data"));

var _buildHeadersProgram = _interopRequireDefault(require("./build-headers-program"));

var _createRedirects = _interopRequireDefault(require("./create-redirects"));

var _isSibling = require("./is-sibling");

var _constants = require("./constants");

let assetsManifest = {}; // Inject a webpack plugin to get the file manifests so we can translate all link headers

exports.onCreateWebpackConfig = ({
  actions,
  stage
}) => {
  if (stage !== _constants.BUILD_HTML_STAGE && stage !== _constants.BUILD_CSS_STAGE) {
    return;
  }

  actions.setWebpackConfig({
    plugins: [new _webpackAssetsManifest.default({
      assets: assetsManifest,
      // mutates object with entries
      merge: true
    })]
  });
};

exports.onPostBuild = async ({
  store,
  pathPrefix,
  reporter
}, userPluginOptions) => {
  const pluginData = (0, _pluginData.default)(store, assetsManifest, pathPrefix);
  const pluginOptions = { ..._constants.DEFAULT_OPTIONS,
    ...userPluginOptions
  };
  const {
    redirects
  } = store.getState();
  let rewrites = [];
  let siblingStaticPaths = [];

  if (pluginOptions.generateMatchPathRewrites) {
    const {
      pages
    } = store.getState();
    rewrites = Array.from(pages.values()).filter(page => page.matchPath && page.matchPath !== page.path).map(page => {
      const siblings = Array.from(pages.values()).filter(maybeSiblingPage => {
        if (maybeSiblingPage.matchPath) return false;
        return (0, _isSibling.isSibling)(page.matchPath, maybeSiblingPage.path);
      }).map(p => p.path);
      siblingStaticPaths.push(...siblings);
      return {
        fromPath: page.matchPath,
        toPath: page.path
      };
    });
  }

  await Promise.all([(0, _buildHeadersProgram.default)(pluginData, pluginOptions, reporter), (0, _createRedirects.default)(pluginData, redirects, rewrites, siblingStaticPaths)]);
};

exports.pluginOptionsSchema = ({
  Joi
}) => Joi.object({
  headers: Joi.object().pattern(/^/, Joi.array().items(Joi.string())).description(`Option to add headers for a filename`),
  allPageHeaders: Joi.array().items(Joi.string()).description(`Option to add headers for all files`),
  mergeSecurityHeaders: Joi.boolean().description(`Option to include default Gatsby Cloud security headers (true by default)`),
  mergeLinkHeaders: Joi.boolean().description(`Option to include default Gatsby Cloud link headers (true by default)`),
  mergeCachingHeaders: Joi.boolean().description(`Option to include default Gatsby Cloud caching headers (true by default)`),
  transformHeaders: Joi.function().arity(2).description(`Option to transform headers using a function`),
  generateMatchPathRewrites: Joi.boolean().description(`Option to include redirect rules for client only paths (set to true by default)`)
});